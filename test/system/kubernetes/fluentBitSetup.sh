#!/usr/bin/env bash

set -euxo pipefail

STORAGE_CLASS=standard
STORAGE_CAPACITY_GI=50

PVC_NAME=log-sink
VOLUME_NAME=logs
MOUNT_PATH=/data

HOST_LOGS=host-logs
HOST_LOGS_PATH=${HOST_LOGS_PATH:-""}
NAME=${NAME:-"pravega-fluent-bit"}
NAMESPACE=${NAMESPACE:-"default"}
IMAGE_REPO=${IMAGE_REPO:-"fluent/fluent-bit"}

KEEP_PVC=false

FLUENT_BIT_INPUTS=$(cat << EOF
[INPUT]
    Name tail
    Path /var/log/containers/*.log
    Tag kube.*
    Mem_Buf_Limit 5MB
    Skip_Long_Lines Off

EOF
)

# Two levels of escaping are required: one for the assignment to this variable,
# and another during expansion in the --set flag.
#
# Regex field of 'trim_newline' must be grouped (?<group>).
FLUENT_BIT_PARSERS=$(cat << EOF
[PARSER]
    Name docker_no_time
    Format json
    Time_Keep Off
    Time_Key time
    Time_Format %Y-%m-%dT%H:%M:%S.%L

[PARSER]
    Name trim_newline
    Format regex
    Regex (?<log>[^\\\n]*)

EOF
)

FLUENT_BIT_FILTERS=$(cat << EOF
[FILTER]
    Name parser
    Match *
    Key_Name log
    Parser trim_newline

EOF
)

FLUENT_BIT_OUTPUTS=$(cat << EOF
[OUTPUT]
    Name file
    Match *
    Path /data
    Format template
    Template {log}

EOF
)

FLUENT_BIT_SERVICE=$(cat << EOF
[SERVICE]
    Flush 1
    Daemon Off
    Log_Level debug
    Parsers_File parsers.conf
    Parsers_File custom_parsers.conf
    HTTP_Server On
    HTTP_Listen 0.0.0.0
    HTTP_Port {{ .Values.service.port }}

EOF
)

# Kuberentes produces a log file for each pod (/var/log/containers/*). Each line
# of stdout generated by the application is appended to it's respective log file,
# formatted based on the configured 'logging driver' (json-file by default).
#
#   {"log":"...\n","stream":"...","time":"..."}
#
# The fluent-bit transformation process is as follows:
#
# 0. The Kubernetes filter default was removed, preventing various metadata being attached to the event.
# 1. The 'docker_no_time' parser drops the time key and converts it into the following message:
#       {"log": "...\n", "stream":"..."}
# 2. The 'parser' filter applies the 'trim_newline' parser, trimming the newline and overrides the log key.
#       {"log": "...", "stream": "..."}
#    This was done to compensate for the newline that is appended to each line in the output plugin.
# 3. Finally the file output plugin uses the '{log}' template to only write back the contents of the log key,
#    effectively avoiding all the extra metadata that was added through this pipeline.
#       "..."

install() {
    # The claim used to persist the logs. Required for all installations.
    cat << EOF | kubectl apply -n=$NAMESPACE -f -
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: $PVC_NAME
spec:
  storageClassName: $STORAGE_CLASS
  accessModes:
    - ReadWriteMany
  resources:
     requests:
       storage: ${STORAGE_CAPACITY_GI}Gi
EOF

    args=(
        --set config.service="$FLUENT_BIT_SERVICE"
        --set config.outputs="$FLUENT_BIT_OUTPUTS"
        --set config.filters="$FLUENT_BIT_FILTERS"
        --set config.inputs="$FLUENT_BIT_INPUTS"
        --set config.customParsers="$FLUENT_BIT_PARSERS"
        --set extraVolumeMounts[0].name=$VOLUME_NAME
        --set extraVolumeMounts[0].mountPath=$MOUNT_PATH
        --set extraVolumes[0].name=$VOLUME_NAME
        --set extraVolumes[0].persistentVolumeClaim.claimName=$PVC_NAME
    )

    # In the case where container logs are not stored/forwarded to the default
    # directory (/var/lib/docker/containers), mounting the location where they are is required.
    if [ ! -z $HOST_LOGS_PATH ]; then
        args+=(--set extraVolumeMounts[1].name=$HOST_LOGS)
        args+=(--set extraVolumeMounts[1].mountPath=$HOST_LOGS_PATH)
        args+=(--set extraVolumeMounts[1].readOnly=true)
        args+=(--set extraVolumes[1].name=$HOST_LOGS)
        args+=(--set extraVolumes[1].hostPath.path=$HOST_LOGS_PATH)
        args+=(--set extraVolumes[1].hostPath.type=)
    fi

    helm install $NAME fluent/fluent-bit "${args[@]}" \
        -n=$NAMESPACE \
        --set=image.repository=$IMAGE_REPO
}

uninstall() {
    set -e
    local response=$(helm delete $NAME -n=$NAMESPACE)
    local return_status=$?
    # Error response other than one containing 'not found'.
    if [ $return_status -eq 1 ] && [[ ! $response =~ "not found" ]]; then
        echo $response
        exit 1
    fi
    if [ $KEEP_PVC = false ]; then
        kubectl delete pvc $PVC_NAME -n=$NAMESPACE --ignore-not-found=true
    fi
    set +e
}

usage() {
        echo -e "Usage: $0.sh <install, uninstall, force-uninstall>"
        echo -e "-k|--keep-pvc: Does not remove the existing PVC during uninstallation."
        echo -e "-h=*|--host-path=*: Creates a new mount point at the provided location (during installation)."
}

CMD=$1
shift

for i in "$@"; do
    case $i in
        -k | --keep-pvc)
            KEEP_PVC=true
            ;;
        -h=* | --host-path=*)
            HOST_LOGS_PATH="${i#*=}"
            ;;
        *)
            echo -e "\n${i%=*} is an invalid option, or is not provided a required value.\n"
            usage
            exit
            ;;
    esac
done

case $CMD in
    install)
        install
        ;;
    uninstall)
        uninstall
        ;;
    *)
        echo -e "$CMD in an invalid command.\n"
        usage
        exit
        ;;
esac